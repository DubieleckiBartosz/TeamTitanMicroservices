version: '3.4'

networks:
  team-titan-microservice-network:
    name: team_titan_network  

services:
  mssql:
    build:
      context: .
      dockerfile: Database/sql.Dockerfile
    container_name: team_titan_microservices.mssql
    restart: unless-stopped
    env_file:
      - .env
    environment: 
      ACCEPT_EULA: "Y"
      SA_PASSWORD: ${MSSQL_TEAM_TITAN_PASSWORD}
    user: root
    ports: 
      - "1440:1433"
    #volumes: 
    #  - "teamtitan-sqldata:/var/opt/mssql"
    networks:
        - team-titan-microservice-network

  teamtitansmtp:
    image: rnwood/smtp4dev
    restart: unless-stopped
    ports:
      - "5010:80"
      - "25:25"
    networks:
        - team-titan-microservice-network

  seq:
    image: datalust/seq
    restart: unless-stopped  
    ports:
        - 5341:80
    environment:
         - ACCEPT_EULA=Y
    networks:
        - team-titan-microservice-network

  mongo:
    image: mongo
    container_name: mongo-database
    restart: unless-stopped 
    ports:
      - 27018:27017
    environment:
      - MONGO_INITDB_ROOT_USERNAME=rootuser
      - MONGO_INITDB_ROOT_PASSWORD=rootpass
    networks:
        - team-titan-microservice-network
    #volumes:
    #  - mongodb-data

  mongo-express:
    image: mongo-express
    container_name: mongo-express
    restart: unless-stopped 
    ports:
      - 8081:8081
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=rootuser
      - ME_CONFIG_MONGODB_ADMINPASSWORD=rootpass
      - ME_CONFIG_MONGODB_SERVER=mongo-database
    networks:
        - team-titan-microservice-network
    depends_on:
      - mongo

  messages:
    image: rabbitmq:3-management-alpine
    env_file:
      - .env
    hostname: "rabbitmq"
    container_name: rabbitmq
    restart: unless-stopped
    environment:
     - RABBITMQ_DEFAULT_USER=guest
     - RABBITMQ_DEFAULT_PASS=${RABBITMQ_TEAM_TITAN_PASSWORD}
    ports:
     - "5672:5672"
     - "15672:15672"

    #volumes:
    #    - rabbitmq:/var/lib/rabbitmq/mnesia
    networks:
        - team-titan-microservice-network

  management-service: 
    build:
      context: .
      dockerfile: src/Services/Management/Management.API/Dockerfile 
    container_name: managementapi
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development
    #  - START_SERVICE=false
    #command: >
    #  sh -c '
    #  if [ "$START_SERVICE" = "false" ]; then
    #    dotnet /app/Management.API.dll;
    #  else
    #    sleep infinity;
    #  fi'
    ports:
      - "7205:80"
    networks:
        - team-titan-microservice-network
    depends_on:
      - mssql
      - mongo
      - seq
      - messages

  calculator-service: 
    build:
      context: .
      dockerfile: src/Services/Calculator/Calculator.API/Dockerfile 
    container_name: calculatorapi
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development 
    ports:
      - "7098:80"
    networks:
        - team-titan-microservice-network
    depends_on:
      - mssql
      - mongo
      - seq
      - messages

  identity-service: 
    build:
      context: .
      dockerfile: src/Services/Identity/Identity.API/Dockerfile 
    container_name: identityapi
    environment: 
      - ASPNETCORE_ENVIRONMENT=Development 
    ports:
      - "7147:80"
    networks:
        - team-titan-microservice-network
    depends_on: 
      - seq 
      - mssql
      - teamtitansmtp

#volumes:
#  teamtitan-sqldata:
#  mongodb-data: 
#  rabbitmq: 